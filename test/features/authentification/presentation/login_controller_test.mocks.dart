// Mocks generated by Mockito 5.4.5 from annotations
// in mywallet_mobile/test/features/authentification/presentation/login_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mywallet_mobile/core/custom_barrel.dart' as _i8;
import 'package:mywallet_mobile/core/error/app_error.dart' as _i6;
import 'package:mywallet_mobile/features/authentification/domain/contract/auth_repository_contract.dart'
    as _i2;
import 'package:mywallet_mobile/features/authentification/domain/usecases/login_usecase.dart'
    as _i4;
import 'package:mywallet_mobile/features/authentification/presentation/controller/auth_navigation_controller.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepositoryContract_0 extends _i1.SmartFake
    implements _i2.AuthRepositoryContract {
  _FakeAuthRepositoryContract_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i4.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepositoryContract get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepositoryContract_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepositoryContract);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i4.Params? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [AuthNavigationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthNavigationController extends _i1.Mock
    implements _i7.AuthNavigationController {
  MockAuthNavigationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void goToLogin() => super.noSuchMethod(
    Invocation.method(#goToLogin, []),
    returnValueForMissingStub: null,
  );

  @override
  void goToSignup() => super.noSuchMethod(
    Invocation.method(#goToSignup, []),
    returnValueForMissingStub: null,
  );

  @override
  void goToDashboard() => super.noSuchMethod(
    Invocation.method(#goToDashboard, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthSessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthSessionService extends _i1.Mock implements _i8.AuthService {
  MockAuthSessionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void start() => super.noSuchMethod(
    Invocation.method(#start, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
