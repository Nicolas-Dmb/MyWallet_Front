// Mocks generated by Mockito 5.4.5 from annotations
// in mywallet_mobile/test/authentification/domain/signup_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mywallet_mobile/authentification/domain/contract/auth_repository_contract.dart'
    as _i3;
import 'package:mywallet_mobile/authentification/domain/entities/user_login.dart'
    as _i7;
import 'package:mywallet_mobile/authentification/domain/entities/user_signup.dart'
    as _i6;
import 'package:mywallet_mobile/core/custom_barrel.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepositoryContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryContract extends _i1.Mock
    implements _i3.AuthRepositoryContract {
  MockAuthRepositoryContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> signup(_i6.UserSignup? userData) =>
      (super.noSuchMethod(
            Invocation.method(#signup, [userData]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#signup, [userData]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> login(_i7.UserLogin? userData) =>
      (super.noSuchMethod(
            Invocation.method(#login, [userData]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#login, [userData]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> refreshToken(
    String? refreshToken,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, [refreshToken]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#refreshToken, [refreshToken]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#logout, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
